# 抛弃了React范式。记得改fewshots
import sys
import re
import string
from .base_env import Env


class MBPPEnv(Env):
    def __init__(self, ground_truth, test_list, is_react=True):
        super().__init__(
            ground_truth,
            invalid_hint="Invalid Action. Valid Action inputs are Lookup<<<topic>>> Search<<<topic>>> and Finish<<<answer>>> without any addional explanations.",
        )
        self.test_list = test_list
        self.is_react = is_react
        self._cached_answer = ""
        self._cached_error = ""
        self._is_correct = False

    # 这里是处理格式的部分
    def parse_action(self, string):
        if '[BEGIN]' in string and '[END]' in string:
            return "Finish", string.split("[BEGIN]")[1].split("[END]")[0]
        return None
            
    def get_observation(self, action_type, argument):
        #result = super().get_observation(action_type, argument) # 这里只是给了是否正确的信息，无报错信息，要改
        # 下面参考base_env的代码，obs携带报错信息
        result = None
        if action_type == "Finish":
            flag, obs = self.is_correct(argument)
            if flag == True:
                obs += "\nAnswer is CORRECT"
            else:
                obs += "\nAnswer is INCORRECT"
            result = (flag, obs, argument)
        return result

    def is_correct(self, candidate_code: str) -> bool:
        """
        检查候选代码是否正确，通过执行候选代码和测试用例来验证。
        如果所有测试用例都通过，则返回 True；否则返回 False。
        """
        print(f"检验的代码: {candidate_code}")
        error = ''
        # 如果候选代码没有更改，直接返回缓存的结果
        if candidate_code == self._cached_answer:
            return self._is_correct, self._cached_error

        # 更新缓存的代码
        self._cached_answer = candidate_code
        self._is_correct = True  # 假设所有测试都通过

        # 初始化执行环境
        local_namespace = {}
        try:
            # 执行候选代码
            exec(candidate_code, globals(), local_namespace)

            # 逐个执行测试用例
            for test in self.test_list:
                exec(test, globals(), local_namespace)
        
        except Exception as e:
            # 如果发生任何异常，设置为测试失败
            print(f"{e}")
            self._is_correct = False
            error = type(e).__name__ + ": " + str(e)
        self._cached_error = error

        return self._is_correct, error


